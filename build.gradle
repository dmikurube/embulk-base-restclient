plugins {
    id "com.jfrog.bintray" version "1.7"
    id "com.github.jruby-gradle.base" version "0.2.1"
    id "java"
    id "maven" // install jar files to the local repo: $ gradle install
    id "maven-publish"
    id "checkstyle"
    id "findbugs"
    //id "jacoco"
}
import com.github.jrubygradle.JRubyExec

group = 'org.embulk.base.restclient'
version = '0.1.3'

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    provided
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencies {
    compile     'org.embulk:embulk-core:0.8.15'
    provided    'org.embulk:embulk-core:0.8.15'
    compile     'javax.ws.rs:javax.ws.rs-api:2.0.1'

    testCompile 'junit:junit:4.+'
    testCompile 'org.embulk:embulk-core:0.8.15:tests'
    // RESTEasy JAX-RS implementation is required only for testing.
    testCompile 'org.jboss.resteasy:resteasy-client:3.0.19.Final'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" //<< "-Xlint:deprecation"
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

javadoc {
    options {
        locale = 'en_US'
        encoding = 'UTF-8'
    }
}

// bintray and publishing
bintray {
    // write at your bintray user name and api key to ~/.gradle/gradle.properties file:
    user = project.hasProperty('bintray_user') ? bintray_user : ''
    key = project.hasProperty('bintray_api_key') ? bintray_api_key : ''

    publications = ['bintrayMavenRelease']
    publish = true

    pkg {
        userOrg = 'embulk-base-restclient'
        repo = 'maven'
        name = project.name
        desc = 'Base classes for Embulk plugins working as REST clients'
        websiteUrl = 'https://github.com/embulk/embulk-base-restclient'
        issueTrackerUrl = 'https://github.com/embulk/embulk-base-restclient/issues'
        vcsUrl = 'https://github.com/embulk/embulk-base-restclient.git'
        licenses = ['Apache-2.0']
        labels = ['embulk', 'java']
        publicDownloadNumbers = true

        version {
            name = project.version
        }
    }
}
publishing {
    publications {
        bintrayMavenRelease(MavenPublication) {
            from components.java
            artifact testsJar
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

task classpath(type: Copy, dependsOn: ["jar"]) {
    doFirst { file('classpath').deleteDir() }
    from (configurations.runtime - configurations.provided + files(jar.archivePath))
    into 'classpath'
}
clean { delete 'classpath' }

// checkstyle
checkstyle {
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    toolVersion = '6.14.1'
}
checkstyleMain {
    configFile = file("${project.rootDir}/config/checkstyle/default.xml")
    ignoreFailures = true
}
checkstyleTest {
    configFile = file("${project.rootDir}/config/checkstyle/default.xml")
    ignoreFailures = true
}
task checkstyle(type: Checkstyle) {
    classpath = sourceSets.main.output + sourceSets.test.output
    source = sourceSets.main.allJava + sourceSets.test.allJava
}

// findbugs
findbugs {
    ignoreFailures = true
}

// add tests/javadoc/source jar tasks as artifacts to be released
task testsJar(type: Jar, dependsOn: classes) {
    classifier = 'tests'
    from sourceSets.test.output
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
